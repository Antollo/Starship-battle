#define SECRET "${SECRET}"

#include <array>
#include <utility>
#include <cmath>

using t = double;

template<std::size_t size, std::size_t... Is>
constexpr auto obfuscateImpl(const char (&str)[size], std::index_sequence<Is...>)
{
    return std::array<t, size-1>{ ((t)str[Is] * (t)str[Is] * 1.011)... };
}

template<std::size_t size>
constexpr auto obfuscate(const char (&str)[size])
{
    return obfuscateImpl(str, std::make_index_sequence<size-1>());
}
 
template<std::size_t size, std::size_t... Is>
inline std::string deobfuscateImpl(std::array<t, size> arr, std::index_sequence<Is...>)
{
    return std::string{ ((char)sqrt(arr[Is]))... };
}

template<std::size_t size>
inline std::string deobfuscate(std::array<t, size> arr)
{
    return deobfuscateImpl(arr, std::make_index_sequence<size>());
}